/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  MdcButtonProps,
} from './components/mdc-button';
import {
  MdcCardMediaProps,
  MdcCardProps,
} from './components/mdc-card';
import {
  MdcCheckboxProps,
} from './components/mdc-checkbox';
import {
  MdcIconButtonProps,
} from './components/mdc-icon-button/index';
import {
  MDCIconButtonToggle,
} from '@material/icon-button';
import {
  MDCRipple,
} from '@material/ripple';
import {
  MdcLayoutGridCellProps,
} from './components/mdc-layout-grid-cell';
import {
  MdcSelectProps,
} from './components/mdc-select';
import {
  MdcSwitchProps,
} from './components/mdc-switch/index';
import {
  MdcTextFieldProps,
} from './components/mdc-text-field';

export namespace Components {
  interface MdcButton {
    /**
    * Enables dense variant.
    */
    'dense': MdcButtonProps["dense"];
    /**
    * Disables button if true.
    */
    'disabled': MdcButtonProps["disabled"];
    /**
    * Sets a hyperlink & uses anchor tag instead of a button.
    */
    'href': MdcButtonProps["href"];
    /**
    * Icon to render within root element.
    */
    'icon': MdcButtonProps["icon"];
    'layout': () => Promise<void>;
    'mdcClass': MdcButtonProps["class"];
    'name': MdcButtonProps["name"];
    /**
    * Enables outlined variant.
    */
    'outlined': MdcButtonProps["outlined"];
    /**
    * Enables raised variant.
    */
    'raised': MdcButtonProps["raised"];
    /**
    * Icon to render on the right side of the element
    */
    'trailingIcon': MdcButtonProps["trailingIcon"];
    'type': MdcButtonProps["type"];
    /**
    * Enables unelevated variant.
    */
    'unelevated': MdcButtonProps["unelevated"];
    'value': MdcButtonProps["value"];
  }
  interface MdcCard {
    'mdcClass': MdcCardProps["class"];
    'outlined': MdcCardProps["outlined"];
  }
  interface MdcCardMedia {
    'imageUrl': MdcCardMediaProps["imageUrl"];
    'mdcClass': MdcCardMediaProps["class"];
    'size': MdcCardMediaProps["size"];
  }
  interface MdcCardPrimaryContent {
    'layout': () => Promise<void>;
  }
  interface MdcCheckbox {
    'checked': MdcCheckboxProps['checked'];
    'disabled': MdcCheckboxProps['disabled'];
    'indeterminate': MdcCheckboxProps['indeterminate'];
    'layout': () => Promise<void>;
    'name': MdcCheckboxProps['name'];
    'value': MdcCheckboxProps['value'];
  }
  interface MdcChipSet {
    'addChip': (chipEl: HTMLElement) => Promise<void>;
  }
  interface MdcDialog {
    'close': (action: string) => Promise<void>;
    'isOpen': () => Promise<boolean>;
    'layout': () => Promise<void>;
    'open': () => Promise<void>;
    'surface': HTMLElement | HTMLElement[];
  }
  interface MdcIconButton {
    'checked': MdcIconButtonProps['checked'];
    'disabled': MdcIconButtonProps['disabled'];
    'layout': () => Promise<void>;
    'name': MdcIconButtonProps['name'];
    'on': boolean;
    'toggle': boolean;
    'type': MdcIconButtonProps['type'];
    'value': MdcIconButtonProps['value'];
  }
  interface MdcLayoutGrid {}
  interface MdcLayoutGridCell {
    'align'?: MdcLayoutGridCellProps["align"];
    'span'?: MdcLayoutGridCellProps["span"];
    'spanDesktop'?: MdcLayoutGridCellProps["spanDesktop"];
    'spanPhone'?: MdcLayoutGridCellProps["spanPhone"];
    'spanTablet'?: MdcLayoutGridCellProps["spanTablet"];
  }
  interface MdcLinearProgress {
    'close': () => Promise<void>;
    'getBuffer': () => Promise<number>;
    'getDeterminate': () => Promise<boolean>;
    'getProgress': () => Promise<number>;
    'getReverse': () => Promise<boolean>;
    'open': () => Promise<void>;
    'setBuffer': (value: number) => Promise<void>;
    'setDeterminate': (value: boolean) => Promise<void>;
    'setProgress': (value: number) => Promise<void>;
    'setReverse': (value: boolean) => Promise<void>;
  }
  interface MdcSelect {
    'disabled': MdcSelectProps['disabled'];
    'getDisabled': () => Promise<boolean>;
    'getValid': () => Promise<boolean>;
    'getValue': () => Promise<string>;
    'label': MdcSelectProps['label'];
    'layout': () => Promise<void>;
    'name': MdcSelectProps['name'];
    'outlined': MdcSelectProps['outlined'];
    'required': MdcSelectProps['required'];
    'selected': MdcSelectProps['selected'];
    'setDisabled': (disabled?: boolean) => Promise<void>;
    'setValid': (valid: boolean) => Promise<boolean>;
    'setValue': (value: string) => Promise<void>;
  }
  interface MdcSnackbar {
    'close': (action: string) => Promise<void>;
    'getActionButtonText': () => Promise<string>;
    'getCloseOnEscape': () => Promise<boolean>;
    'getLabelText': () => Promise<string>;
    'getTimeoutMs': () => Promise<number>;
    'isOpen': () => Promise<boolean>;
    'open': () => Promise<void>;
    'setActionButtonText': (text: string) => Promise<void>;
    'setCloseOnEscape': (closes: boolean) => Promise<void>;
    'setLabelText': (text: string) => Promise<void>;
    'setTimeoutMs': (ms: number) => Promise<void>;
  }
  interface MdcSwitch {
    'checked': MdcSwitchProps['checked'];
    'disabled': MdcSwitchProps['disabled'];
    'name': MdcSwitchProps['name'];
    'setChecked': (checked?: boolean) => Promise<void>;
    'setDisabled': (disabled?: boolean) => Promise<void>;
  }
  interface MdcTextField {
    'cols': MdcTextFieldProps['cols'];
    'disabled': MdcTextFieldProps['disabled'];
    'focusNative': () => Promise<void>;
    'fullWidth': MdcTextFieldProps['fullWidth'];
    'getDisabled': () => Promise<boolean>;
    'getValid': () => Promise<boolean>;
    'getValue': () => Promise<string>;
    'inputRef': MdcTextFieldProps['inputRef'];
    'label': MdcTextFieldProps['label'];
    'layout': () => Promise<void>;
    'name': MdcTextFieldProps['name'];
    'outlined': MdcTextFieldProps['outlined'];
    'required': MdcTextFieldProps['required'];
    'rows': MdcTextFieldProps['rows'];
    'setDisabled': (disabled?: boolean) => Promise<void>;
    'setValid': (valid: boolean) => Promise<boolean>;
    'setValue': (value: string) => Promise<void>;
    'textarea': MdcTextFieldProps['textarea'];
    'type': MdcTextFieldProps['type'];
    'value': MdcTextFieldProps['value'];
    'withLeadingIcon': MdcTextFieldProps['withLeadingIcon'];
    'withTrailingIcon': MdcTextFieldProps['withTrailingIcon'];
  }
}

declare global {


  interface HTMLMdcButtonElement extends Components.MdcButton, HTMLStencilElement {}
  var HTMLMdcButtonElement: {
    prototype: HTMLMdcButtonElement;
    new (): HTMLMdcButtonElement;
  };

  interface HTMLMdcCardElement extends Components.MdcCard, HTMLStencilElement {}
  var HTMLMdcCardElement: {
    prototype: HTMLMdcCardElement;
    new (): HTMLMdcCardElement;
  };

  interface HTMLMdcCardMediaElement extends Components.MdcCardMedia, HTMLStencilElement {}
  var HTMLMdcCardMediaElement: {
    prototype: HTMLMdcCardMediaElement;
    new (): HTMLMdcCardMediaElement;
  };

  interface HTMLMdcCardPrimaryContentElement extends Components.MdcCardPrimaryContent, HTMLStencilElement {}
  var HTMLMdcCardPrimaryContentElement: {
    prototype: HTMLMdcCardPrimaryContentElement;
    new (): HTMLMdcCardPrimaryContentElement;
  };

  interface HTMLMdcCheckboxElement extends Components.MdcCheckbox, HTMLStencilElement {}
  var HTMLMdcCheckboxElement: {
    prototype: HTMLMdcCheckboxElement;
    new (): HTMLMdcCheckboxElement;
  };

  interface HTMLMdcChipSetElement extends Components.MdcChipSet, HTMLStencilElement {}
  var HTMLMdcChipSetElement: {
    prototype: HTMLMdcChipSetElement;
    new (): HTMLMdcChipSetElement;
  };

  interface HTMLMdcDialogElement extends Components.MdcDialog, HTMLStencilElement {}
  var HTMLMdcDialogElement: {
    prototype: HTMLMdcDialogElement;
    new (): HTMLMdcDialogElement;
  };

  interface HTMLMdcIconButtonElement extends Components.MdcIconButton, HTMLStencilElement {}
  var HTMLMdcIconButtonElement: {
    prototype: HTMLMdcIconButtonElement;
    new (): HTMLMdcIconButtonElement;
  };

  interface HTMLMdcLayoutGridElement extends Components.MdcLayoutGrid, HTMLStencilElement {}
  var HTMLMdcLayoutGridElement: {
    prototype: HTMLMdcLayoutGridElement;
    new (): HTMLMdcLayoutGridElement;
  };

  interface HTMLMdcLayoutGridCellElement extends Components.MdcLayoutGridCell, HTMLStencilElement {}
  var HTMLMdcLayoutGridCellElement: {
    prototype: HTMLMdcLayoutGridCellElement;
    new (): HTMLMdcLayoutGridCellElement;
  };

  interface HTMLMdcLinearProgressElement extends Components.MdcLinearProgress, HTMLStencilElement {}
  var HTMLMdcLinearProgressElement: {
    prototype: HTMLMdcLinearProgressElement;
    new (): HTMLMdcLinearProgressElement;
  };

  interface HTMLMdcSelectElement extends Components.MdcSelect, HTMLStencilElement {}
  var HTMLMdcSelectElement: {
    prototype: HTMLMdcSelectElement;
    new (): HTMLMdcSelectElement;
  };

  interface HTMLMdcSnackbarElement extends Components.MdcSnackbar, HTMLStencilElement {}
  var HTMLMdcSnackbarElement: {
    prototype: HTMLMdcSnackbarElement;
    new (): HTMLMdcSnackbarElement;
  };

  interface HTMLMdcSwitchElement extends Components.MdcSwitch, HTMLStencilElement {}
  var HTMLMdcSwitchElement: {
    prototype: HTMLMdcSwitchElement;
    new (): HTMLMdcSwitchElement;
  };

  interface HTMLMdcTextFieldElement extends Components.MdcTextField, HTMLStencilElement {}
  var HTMLMdcTextFieldElement: {
    prototype: HTMLMdcTextFieldElement;
    new (): HTMLMdcTextFieldElement;
  };
  interface HTMLElementTagNameMap {
    'mdc-button': HTMLMdcButtonElement;
    'mdc-card': HTMLMdcCardElement;
    'mdc-card-media': HTMLMdcCardMediaElement;
    'mdc-card-primary-content': HTMLMdcCardPrimaryContentElement;
    'mdc-checkbox': HTMLMdcCheckboxElement;
    'mdc-chip-set': HTMLMdcChipSetElement;
    'mdc-dialog': HTMLMdcDialogElement;
    'mdc-icon-button': HTMLMdcIconButtonElement;
    'mdc-layout-grid': HTMLMdcLayoutGridElement;
    'mdc-layout-grid-cell': HTMLMdcLayoutGridCellElement;
    'mdc-linear-progress': HTMLMdcLinearProgressElement;
    'mdc-select': HTMLMdcSelectElement;
    'mdc-snackbar': HTMLMdcSnackbarElement;
    'mdc-switch': HTMLMdcSwitchElement;
    'mdc-text-field': HTMLMdcTextFieldElement;
  }
}

declare namespace LocalJSX {
  interface MdcButton {
    /**
    * Enables dense variant.
    */
    'dense'?: MdcButtonProps["dense"];
    /**
    * Disables button if true.
    */
    'disabled'?: MdcButtonProps["disabled"];
    /**
    * Sets a hyperlink & uses anchor tag instead of a button.
    */
    'href'?: MdcButtonProps["href"];
    /**
    * Icon to render within root element.
    */
    'icon'?: MdcButtonProps["icon"];
    'mdcClass'?: MdcButtonProps["class"];
    'name'?: MdcButtonProps["name"];
    /**
    * Enables outlined variant.
    */
    'outlined'?: MdcButtonProps["outlined"];
    /**
    * Enables raised variant.
    */
    'raised'?: MdcButtonProps["raised"];
    /**
    * Icon to render on the right side of the element
    */
    'trailingIcon'?: MdcButtonProps["trailingIcon"];
    'type'?: MdcButtonProps["type"];
    /**
    * Enables unelevated variant.
    */
    'unelevated'?: MdcButtonProps["unelevated"];
    'value'?: MdcButtonProps["value"];
  }
  interface MdcCard {
    'mdcClass'?: MdcCardProps["class"];
    'outlined'?: MdcCardProps["outlined"];
  }
  interface MdcCardMedia {
    'imageUrl'?: MdcCardMediaProps["imageUrl"];
    'mdcClass'?: MdcCardMediaProps["class"];
    'size'?: MdcCardMediaProps["size"];
  }
  interface MdcCardPrimaryContent {}
  interface MdcCheckbox {
    'checked'?: MdcCheckboxProps['checked'];
    'disabled'?: MdcCheckboxProps['disabled'];
    'indeterminate'?: MdcCheckboxProps['indeterminate'];
    'name'?: MdcCheckboxProps['name'];
    'value'?: MdcCheckboxProps['value'];
  }
  interface MdcChipSet {}
  interface MdcDialog {
    'surface': HTMLElement | HTMLElement[];
  }
  interface MdcIconButton {
    'checked'?: MdcIconButtonProps['checked'];
    'disabled'?: MdcIconButtonProps['disabled'];
    'name'?: MdcIconButtonProps['name'];
    'on'?: boolean;
    'toggle'?: boolean;
    'type'?: MdcIconButtonProps['type'];
    'value'?: MdcIconButtonProps['value'];
  }
  interface MdcLayoutGrid {}
  interface MdcLayoutGridCell {
    'align'?: MdcLayoutGridCellProps["align"];
    'span'?: MdcLayoutGridCellProps["span"];
    'spanDesktop'?: MdcLayoutGridCellProps["spanDesktop"];
    'spanPhone'?: MdcLayoutGridCellProps["spanPhone"];
    'spanTablet'?: MdcLayoutGridCellProps["spanTablet"];
  }
  interface MdcLinearProgress {}
  interface MdcSelect {
    'disabled'?: MdcSelectProps['disabled'];
    'label'?: MdcSelectProps['label'];
    'name'?: MdcSelectProps['name'];
    'outlined'?: MdcSelectProps['outlined'];
    'required'?: MdcSelectProps['required'];
    'selected'?: MdcSelectProps['selected'];
  }
  interface MdcSnackbar {}
  interface MdcSwitch {
    'checked'?: MdcSwitchProps['checked'];
    'disabled'?: MdcSwitchProps['disabled'];
    'name'?: MdcSwitchProps['name'];
  }
  interface MdcTextField {
    'cols'?: MdcTextFieldProps['cols'];
    'disabled'?: MdcTextFieldProps['disabled'];
    'fullWidth'?: MdcTextFieldProps['fullWidth'];
    'inputRef'?: MdcTextFieldProps['inputRef'];
    'label'?: MdcTextFieldProps['label'];
    'name'?: MdcTextFieldProps['name'];
    'outlined'?: MdcTextFieldProps['outlined'];
    'required'?: MdcTextFieldProps['required'];
    'rows'?: MdcTextFieldProps['rows'];
    'textarea'?: MdcTextFieldProps['textarea'];
    'type'?: MdcTextFieldProps['type'];
    'value'?: MdcTextFieldProps['value'];
    'withLeadingIcon'?: MdcTextFieldProps['withLeadingIcon'];
    'withTrailingIcon'?: MdcTextFieldProps['withTrailingIcon'];
  }

  interface IntrinsicElements {
    'mdc-button': MdcButton;
    'mdc-card': MdcCard;
    'mdc-card-media': MdcCardMedia;
    'mdc-card-primary-content': MdcCardPrimaryContent;
    'mdc-checkbox': MdcCheckbox;
    'mdc-chip-set': MdcChipSet;
    'mdc-dialog': MdcDialog;
    'mdc-icon-button': MdcIconButton;
    'mdc-layout-grid': MdcLayoutGrid;
    'mdc-layout-grid-cell': MdcLayoutGridCell;
    'mdc-linear-progress': MdcLinearProgress;
    'mdc-select': MdcSelect;
    'mdc-snackbar': MdcSnackbar;
    'mdc-switch': MdcSwitch;
    'mdc-text-field': MdcTextField;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'mdc-button': LocalJSX.MdcButton & JSXBase.HTMLAttributes<HTMLMdcButtonElement>;
      'mdc-card': LocalJSX.MdcCard & JSXBase.HTMLAttributes<HTMLMdcCardElement>;
      'mdc-card-media': LocalJSX.MdcCardMedia & JSXBase.HTMLAttributes<HTMLMdcCardMediaElement>;
      'mdc-card-primary-content': LocalJSX.MdcCardPrimaryContent & JSXBase.HTMLAttributes<HTMLMdcCardPrimaryContentElement>;
      'mdc-checkbox': LocalJSX.MdcCheckbox & JSXBase.HTMLAttributes<HTMLMdcCheckboxElement>;
      'mdc-chip-set': LocalJSX.MdcChipSet & JSXBase.HTMLAttributes<HTMLMdcChipSetElement>;
      'mdc-dialog': LocalJSX.MdcDialog & JSXBase.HTMLAttributes<HTMLMdcDialogElement>;
      'mdc-icon-button': LocalJSX.MdcIconButton & JSXBase.HTMLAttributes<HTMLMdcIconButtonElement>;
      'mdc-layout-grid': LocalJSX.MdcLayoutGrid & JSXBase.HTMLAttributes<HTMLMdcLayoutGridElement>;
      'mdc-layout-grid-cell': LocalJSX.MdcLayoutGridCell & JSXBase.HTMLAttributes<HTMLMdcLayoutGridCellElement>;
      'mdc-linear-progress': LocalJSX.MdcLinearProgress & JSXBase.HTMLAttributes<HTMLMdcLinearProgressElement>;
      'mdc-select': LocalJSX.MdcSelect & JSXBase.HTMLAttributes<HTMLMdcSelectElement>;
      'mdc-snackbar': LocalJSX.MdcSnackbar & JSXBase.HTMLAttributes<HTMLMdcSnackbarElement>;
      'mdc-switch': LocalJSX.MdcSwitch & JSXBase.HTMLAttributes<HTMLMdcSwitchElement>;
      'mdc-text-field': LocalJSX.MdcTextField & JSXBase.HTMLAttributes<HTMLMdcTextFieldElement>;
    }
  }
}


